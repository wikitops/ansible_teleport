# {{ ansible_managed }}

# This section of the configuration file applies to all teleport
# services.
teleport:
    # nodename allows to assign an alternative name this node can be reached by.
    # by default it's equal to hostname
    nodename: {{ teleport_nodename }}

    # Data directory where Teleport keeps its data, like keys/users for
    # authentication (if using the default BoltDB back-end)
    data_dir: {{ teleport_data_dir }}

    # one-time invitation token used to join a cluster. it is not used on
    # subsequent starts
{% if teleport_ssh_labels.role == 'master' %}
    auth_token: {{ teleport_auth_tockens_auth_proxy_node }}
{% elif teleport_ssh_labels.role == 'auth' %}
    auth_token: {{ teleport_auth_tockens_auth }}
{% elif teleport_ssh_labels.role == 'proxy' %}
    auth_token: {{ teleport_auth_tockens_proxy }}
{% elif teleport_ssh_labels.role == 'node' %}
    auth_token: {{ teleport_auth_tockens_node }}
{% endif %}

    # when running in multi-homed or NATed environments Teleport nodes need
    # to know which IP it will be reachable at by other nodes
    advertise_ip: {{ teleport_advertise_ip }}

    # list of auth servers in a cluster. you will have more than one auth server
    # if you configure teleport auth to run in HA configuration
    auth_servers:
    {% for host in groups['auth'] %}
    - {{ host }}:3025
    {% endfor %}

    # Teleport throttles all connections to avoid abuse. These settings allow
    # you to adjust the default limits
    connection_limits:
        max_connections: 1000
        max_users: 250

    # Logging configuration. Possible output values are 'stdout', 'stderr' and
    # 'syslog'. Possible severity values are INFO, WARN and ERROR (default).
    log:
        output: {{ teleport_log_output }}
        severity: {{ teleport_log_severity }}

    # Type of storage used for keys. You need to configure this to use etcd
    # backend if you want to run Teleport in HA configuration.
    storage:
        type: bolt

# This section configures the 'auth service':
{% if inventory_hostname in groups['auth'] %}
auth_service:
    # Turns 'auth' role on. Default is 'yes'
    enabled: yes

    # A cluster name is used as part of a signature in certificates
    # generated by this CA.
    #
    # We strongly recommend to explicitly set it to something meaningful as it
    # becomes important when configuring trust between multiple clusters.
    #
    # By default an automatically generated name is used (not recommended)
    #
    # IMPORTANT: if you change cluster_name, it will invalidate all generated
    # certificates and keys (may need to wipe out /var/lib/teleport directory)
    cluster_name: "{{ teleport_auth_cluster_name }}"

    authentication:
        # default authentication type. possible values are 'local', 'oidc' and 'saml'
        # only local authentication (Teleport's own user DB) is supported in the open
        # source version
        type: local
        # second_factor can be off, otp, or u2f
        second_factor: {{ teleport_auth_second_factor }}
        # this section is used if second_factor is set to 'u2f'
        #u2f:
            # app_id must point to the URL of the Teleport Web UI (proxy) accessible
            # by the end users
            # app_id: https://localhost:3080
            # facets must list all proxy servers if there are more than one deployed
            # facets:
            # - https://localhost:3080

    # IP and the port to bind to. Other Teleport nodes will be connecting to
    # this port (AKA "Auth API" or "Cluster API") to validate client
    # certificates
    listen_addr: {{ teleport_auth_listen_addr }}:3025

    # Pre-defined tokens for adding new nodes to a cluster. Each token specifies
    # the role a new node will be allowed to assume. The more secure way to
    # add nodes is to use `ttl node add --ttl` command to generate auto-expiring
    # tokens.
    #
    # We recommend to use tools like `pwgen` to generate sufficiently random
    # tokens of 32+ byte length.
    tokens:
        - "proxy,node,auth:{{ teleport_auth_tockens_auth_proxy_node }}"
        - "proxy:{{ teleport_auth_tockens_proxy }}"
        - "auth:{{ teleport_auth_tockens_auth }}"
        - "node:{{ teleport_auth_tockens_node }}"

    # Optional setting for configuring session recording. Possible values are:
    #    "node"  : sessions will be recorded on the node level  (the default)
    #    "proxy" : recording on the proxy level, see "recording proxy mode" in "Audit Log" section
    #    "off"   : session recording is turned off
    session_recording: "{{ teleport_auth_session_recording }}"

    # License file to start auth server with. Note that this setting is ignored
    # in open-source Teleport and is required only for Teleport Pro, Business
    # and Enterprise subscription plans.
    #
    # The path can be either absolute or relative to the configured `data_dir`
    # and should point to the license file obtained from Teleport Download Portal.
    #
    # If not set, by default Teleport will look for the `license.pem` file in
    # the configured `data_dir`.
    # license_file: /var/lib/teleport/license.pem
{% else %}
auth_service:
    # Turns 'auth' role on. Default is 'yes'
    enabled: no
{% endif %}

# This section configures the 'node service':
{% if inventory_hostname in groups['ssh'] %}
ssh_service:
    # Turns 'ssh' role on. Default is 'yes'
    enabled: yes

    # IP and the port for SSH service to bind to.
    listen_addr: {{ teleport_ssh_listen_addr }}:3022
    # See explanation of labels in "Labeling Nodes" section below
    labels:
    {% for label, value in teleport_ssh_labels.iteritems() %}
    {{ label }}: {{ value }}
    {% endfor %}

    # List of the commands to periodically execute. Their output will be used as node labels.
    # See "Labeling Nodes" section below for more information.
    # commands:
    # - name: arch             # this command will add a label like 'arch=x86_64' to a node
    #   command: [uname, -p]
    #   period: 1h0m0s

    # enables reading ~/.tsh/environment before creating a session. by default
    # set to false, can be set true here or as a command line flag.
    permit_user_env: false
{% else %}
ssh_service:
    # Turns 'ssh' role on. Default is 'yes'
    enabled: no
{% endif %}

# This section configures the 'proxy servie'
{% if inventory_hostname in groups['proxy'] %}
proxy_service:
    # Turns 'proxy' role on. Default is 'yes'
    enabled: yes

    # SSH forwarding/proxy address. Command line (CLI) clients always begin their
    # SSH sessions by connecting to this port
    listen_addr: {{ teleport_proxy_listen_addr }}:3023

    # Reverse tunnel listening address. An auth server (CA) can establish an
    # outbound (from behind the firewall) connection to this address.
    # This will allow users of the outside CA to connect to behind-the-firewall
    # nodes.
    tunnel_listen_addr: {{ teleport_proxy_tunnel_listen_addr }}:3024

    # The HTTPS listen address to serve the Web UI and also to authenticate the
    # command line (CLI) users via password+HOTP
    web_listen_addr: {{ teleport_proxy_web_listen_addr }}:3080

    # TLS certificate for the HTTPS connection. Configuring these properly is
    # critical for Teleport security.
    https_key_file: {{ teleport_proxy_https_key_file }}
    https_cert_file: {{ teleport_proxy_https_cert_file }}
{% else %}
proxy_service:
    # Turns 'proxy' role on. Default is 'yes'
    enabled: no
{% endif %}
